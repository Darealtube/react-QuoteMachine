{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["library","add","fab","faQuoteLeft","faSpinner","faClipboard","App","useState","copy","setcopy","i","quoteRef","useRef","backgroundList","randomQuote","$","ajax","url","dataType","data","beforeSend","document","getElementById","style","backgroundImage","position","top","right","bottom","left","zIndex","transition","opacity","success","quoteData","quoteAuthor","html","quoteText","attr","click","val","current","select","execCommand","complete","useEffect","id","className","icon","href","target","onClick","ref","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kSAOAA,IAAQC,IAAIC,IAAKC,IAAaC,IAAWC,KAkH1BC,MA/Gf,WAAe,MAEUC,mBAAS,IAFnB,mBAENC,EAFM,KAEDC,EAFC,KAGTC,GAAK,EACHC,EAAWC,iBAAO,MACpBC,EAAiB,CACnB,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,2CACA,4CAIF,SAASC,IACPC,IAAEC,KAAK,CACHC,IAAK,uCACLC,SAAU,QACVC,KAAM,+CAENC,WAAY,WACD,KAANV,IACDA,GAAK,GAEPW,SAASC,eAAe,WAAWC,MAAMC,gBAAkBX,EAAeH,GAC1EW,SAASC,eAAe,WAAWC,MAAME,SAAW,WACpDJ,SAASC,eAAe,WAAWC,MAAMG,IAAM,IAC/CL,SAASC,eAAe,WAAWC,MAAMI,MAAQ,IACjDN,SAASC,eAAe,WAAWC,MAAMK,OAAS,IAClDP,SAASC,eAAe,WAAWC,MAAMM,KAAO,IAChDR,SAASC,eAAe,WAAWC,MAAMO,OAAS,KAClDT,SAASC,eAAe,WAAWC,MAAMQ,WAAa,oBACtDV,SAASC,eAAe,WAAWC,MAAMS,QAAU,IACnDvB,EAAQ,KAGVwB,QAAS,SAAUC,GACe,KAA1BA,EAAUC,cACVD,EAAUC,YAAc,WAE5BpB,IAAE,QAAQqB,KAAK,IAAMF,EAAUG,WAC/BtB,IAAE,SAASqB,KAAKF,EAAUC,aAC1BpB,IAAE,eAAeuB,KAAK,OAAQ,oDAA+CJ,EAAUG,UAAzD,sGACgDH,EAAUC,cAExFpB,IAAE,OAAOwB,OAAM,WACfxB,IAAE,UAAUyB,IAAZ,UAAmBN,EAAUG,UAA7B,uEACgDH,EAAUC,cACxDxB,EAAS8B,QAAQC,SACjBrB,SAASsB,YAAY,QACrBlC,EAAQ,4BAKdmC,SAAU,WACNlC,GAAK,EACPW,SAASC,eAAe,WAAWC,MAAMC,gBAAkBX,EAAeH,GAC1EW,SAASC,eAAe,WAAWC,MAAMS,QAAU,OAU3D,OAJFa,qBAAU,WACR/B,MACA,IAGE,6BACA,yBAAKgC,GAAG,UAAUC,UAAU,WAC5B,yBAAKA,UAAU,aAEf,yBAAKA,UAAU,UACf,4BAAI,kBAAC,IAAD,CAAiBC,KAAK,eAAe,0BAAMF,GAAG,UAGlD,yBAAKA,GAAG,IAAIC,UAAU,WACtB,gCAAK,0BAAMD,GAAG,WAGd,yBAAKC,UAAU,UACf,uBAAGD,GAAG,aAAaG,KAAK,KAAKC,OAAO,UACpC,kBAAC,IAAD,CAAiBJ,GAAG,MAAME,KAAM,CAAC,MAAO,cAExC,kBAAC,IAAD,CAAkBF,GAAG,KAAKE,KAAK,cAAa,0BAAMF,GAAG,QAAQtC,IAG7D,yBAAKsC,GAAG,KAAI,4BAAQA,GAAG,MAAMK,QAASrC,GAA1B,iBAKZ,8BACI,8BACEgC,GAAG,QACHM,IAAKzC,EACL0C,MAAM,QCrGIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxC,SAASC,eAAe,SDyHpB,kBAAmBwC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e95a6ae0.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faQuoteLeft, faSpinner, faClipboard } from '@fortawesome/free-solid-svg-icons'\nimport $ from 'jquery';\nlibrary.add(fab, faQuoteLeft, faSpinner, faClipboard);\n\n\nfunction App() {\n  //INITIALIZE VARIABLES\n  const [copy,setcopy] = useState(\"\");\n  var i = -1;\n  const quoteRef = useRef(null);\n  var backgroundList = [\n    \"linear-gradient(85deg, #17255A, #CE6550)\",\n    \"linear-gradient(85deg, #2a9d8f, #e76f51)\",\n    \"linear-gradient(85deg, #a8dadc, #1d3557)\",\n    \"linear-gradient(85deg, #ffb4a2, #b5838d)\",\n    \"linear-gradient(85deg, #003049, #d62828)\",\n    \"linear-gradient(85deg, #ffb5a7, #fec89a)\",\n    \"linear-gradient(85deg, #ef476f, #118ab2)\",\n    \"linear-gradient(85deg, #7400b8, #4ea8de)\",\n    \"linear-gradient(85deg, #14213d, #e5e5e5)\",\n    \"linear-gradient(85deg, #606c38, #bc6c25)\",\n    \"linear-gradient(85deg, #007f5f, #dddf00)\"\n  ];\n\n  //RANDOM QUOTE API\n  function randomQuote() {\n    $.ajax({\n        url: \"https://api.forismatic.com/api/1.0/?\",\n        dataType: \"jsonp\",\n        data: \"method=getQuote&format=jsonp&lang=en&jsonp=?\",\n        //BACKGROUND CYCLING\n        beforeSend: function(){\n          if(i === 10){\n            i = -1;\n          }\n          document.getElementById('display').style.backgroundImage = backgroundList[i];\n          document.getElementById('display').style.position = \"absolute\";\n          document.getElementById('display').style.top = \"0\";\n          document.getElementById('display').style.right = \"0\";\n          document.getElementById('display').style.bottom = \"0\";\n          document.getElementById('display').style.left = \"0\";\n          document.getElementById('display').style.zIndex = \"-1\";\n          document.getElementById('display').style.transition = \"opacity 2s linear\";\n          document.getElementById('display').style.opacity = \"0\";\n          setcopy(\"\");\n        },\n        //SHOW QUOTE\n        success: function (quoteData) {\n            if (quoteData.quoteAuthor === '') {\n                quoteData.quoteAuthor = 'Unknown';\n            };\n            $(\"#API\").html(\" \" + quoteData.quoteText);\n            $(\"#API2\").html(quoteData.quoteAuthor);\n            $(\"#twitterBtn\").attr(\"href\", 'https://twitter.com/intent/tweet?text=' + `\"${quoteData.quoteText}\"\n                                                                                      - ${quoteData.quoteAuthor}`);\n            //COPY QUOTE\n            $(\"#fb\").click(function(){\n            $(\"#invis\").val(`${quoteData.quoteText}\n                                                        - ${quoteData.quoteAuthor}`);\n              quoteRef.current.select();\n              document.execCommand('copy');\n              setcopy(\"Copied to Clipboard!\");\n            });\n        },\n\n        //BACKGROUND CYCLING\n        complete: function(){\n            i += 1;\n          document.getElementById('display').style.backgroundImage = backgroundList[i];\n          document.getElementById('display').style.opacity = \"1\";\n        }\n    });\n};\n\n//EXECUTE API ON LOAD\nuseEffect(()=>{\n  randomQuote();\n},[]);\n\n  return (\n    <div>\n    <div id=\"display\" className=\"display\">\n    <div className=\"quotearea\">\n\n    <div className=\"quotes\">\n    <h3><FontAwesomeIcon icon=\"quote-left\" /><span id=\"API\"></span></h3>\n    </div>\n\n    <div id=\"a\" className=\"authors\">\n    <h3>-<span id=\"API2\"></span></h3>\n    </div>\n\n    <div className=\"brands\">\n    <a id=\"twitterBtn\" href='# ' target=\"_blank\">\n    <FontAwesomeIcon id=\"twt\" icon={['fab', 'twitter']} />\n    </a>\n    <FontAwesomeIcon  id=\"fb\" icon=\"clipboard\"/><span id=\"copy\">{copy}</span>\n    </div>\n\n    <div id=\"s\"><button id=\"new\" onClick={randomQuote}>New Quote!</button></div>\n\n    </div>\n    </div>\n\n    <form>\n        <textarea\n          id=\"invis\"\n          ref={quoteRef}\n          value=\"\"\n        />\n    </form>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}